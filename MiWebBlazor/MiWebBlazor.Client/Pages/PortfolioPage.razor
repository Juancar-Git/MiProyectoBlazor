@page "/portfolio"
@inject HttpClient Http
@using MiWebBlazor.Shared
@using System.Globalization

<!-- Portfolio Section -->
<section id="portfolio" class="portfolio section">

    <!-- Section Title -->
    <div class="container section-title" data-aos="fade-up">
        <h2>Portfolio</h2>
        <p>Necessitatibus eius consequatur ex aliquid fuga eum quidem sint consectetur velit</p>
    </div><!-- End Section Title -->

    <div class="container">

        <div class="isotope-layout" data-default-filter="*" data-layout="masonry" data-sort="original-order">

            <ul class="portfolio-filters isotope-filters" data-aos="fade-up" data-aos-delay="100">
                <li class="@classDictionary["all"]" @onclick=@(async(e) => await CambiarFiltro(e, "all"))>All</li>
                <li class="@classDictionary["app"]" @onclick=@(async(e) => await CambiarFiltro(e, "app"))>App</li>
                <li class="@classDictionary["product"]" @onclick=@(async(e) => await CambiarFiltro(e, "product"))>Card</li>
                <li class="@classDictionary["branding"]" @onclick=@(async(e) => await CambiarFiltro(e, "branding"))>Web</li>
            </ul><!-- End Portfolio Filters -->

            <div class="row gy-4 isotope-container" data-aos="fade-up" data-aos-delay="200">

                @foreach (var PortfolioItem in myPortfolioList)
                {
                    <div class="col-lg-4 col-md-6 portfolio-item isotope-item filter-@PortfolioItem.Filter">
                        <img src="@PortfolioItem.SrcImage" class="img-fluid" alt="">
                        <div class="portfolio-info">
                            <h4>@PortfolioItem.Name</h4>
                            <p>@PortfolioItem.Description</p>
                            <a href="@PortfolioItem.SrcImage" title="@PortfolioItem.Name" data-gallery="portfolio-gallery-@PortfolioItem.Filter" class="glightbox preview-link"><i class="bi bi-zoom-in"></i></a>
                            <a href="portfolio-details.html" title="More Details" class="details-link"><i class="bi bi-link-45deg"></i></a>
                        </div>
                    </div>

                    <!-- End Portfolio Item -->
                }

            </div><!-- End Portfolio Container -->

        </div>

    </div>

</section><!-- /Portfolio Section -->
@code {
    [Inject]
    NavigationManager NavigationManager { get; set; }
    int IdResume = 2;
    List<Portfolio> myPortfolioList;
    Dictionary<string, string> classDictionary = new Dictionary<string, string>();
    string[] strLiArr = { "all", "app", "product", "branding" };

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += (s, e) => StateHasChanged();
        List<Portfolio> auxPortfolioList = await Http.GetFromJsonAsync<List<Portfolio>>($"api/Portfolio/") ?? new List<Portfolio>();
        myPortfolioList = auxPortfolioList.Where(x => x.ResumeId == IdResume).ToList();
        await fillClassDictionary("all");
    }
    protected async Task CambiarFiltro(MouseEventArgs mouseEventArgs, string strFiltro)
    {
        List<Portfolio> auxPortfolioList = await Http.GetFromJsonAsync<List<Portfolio>>($"api/Portfolio/") ?? new List<Portfolio>();
        if (strFiltro.Equals("all"))
            myPortfolioList = auxPortfolioList.Where(x => x.ResumeId == IdResume).ToList();
        else
            myPortfolioList = auxPortfolioList.Where(x => x.ResumeId == IdResume && x.Filter.Equals(strFiltro)).ToList();
        await fillClassDictionary(strFiltro);
        StateHasChanged();
    }

    protected async Task fillClassDictionary(string strActiveLi)
    {
        classDictionary.Clear();
        foreach (var item in strLiArr)
        {
            classDictionary.Add(item, item == strActiveLi ? "filter-active" : "");
        }
    }
}